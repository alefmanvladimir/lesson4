#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Company.headers.fc";
#include "tact_Company.stdlib.fc";
#include "tact_Company.storage.fc";

;;
;; Contract Company functions
;;

(int) $Company$_contract_init() impure inline_ref {
    var (($self'balance)) = (null());
    $self'balance = 0;
    return ($self'balance);
}

((int), int) $Company$_fun_balance((int) $self) impure inline_ref {
    var (($self'balance)) = $self;
    return (($self'balance), $self'balance);
}

;;
;; Receivers of a Contract Company
;;

(((int)), ()) $Company$_internal_binary_Deposit((int) $self, (int, int) $msg) impure inline {
    var ($self'balance) = $self;
    var ($msg'amount, $msg'queryId) = $msg;
    $self'balance = ($self'balance + $msg'amount);
    return (($self'balance), ());
}

(((int)), ()) $Company$_internal_binary_Deploy((int) $self, (int) $deploy) impure inline {
    var ($self'balance) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'balance)~$Company$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'balance), ());
}

;;
;; Get methods of a Contract Company
;;

_ %balance() method_id(104128) {
    var self = $Company$_contract_load();
    var res = self~$Company$_fun_balance();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmbaYrR8eMxWzCqLr6NdQAN2aQ6gZ6Z1G2W7HL5p9wtPGK";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Company
;;

((int), int) $Company$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deposit message
    if (op == 2392960161) {
        var msg = in_msg~$Deposit$_load();
        self~$Company$_internal_binary_Deposit(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Company$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Company$_contract_load();
    
    ;; Handle operation
    int handled = self~$Company$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Company$_contract_store(self);
}
